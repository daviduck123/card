<?php
// auto-generated by sfPropelAdmin
// date: 2014/06/11 09:31:05
?>
<?php

/**
 * autoKategori actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoKategori
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 9855 2008-06-25 11:26:01Z FabianLange $
 */
class autoKategoriActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('kategori', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/kategori/filters');

    // pager
    $this->pager = new sfPropelPager('Kategori', 3);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', $this->getUser()->getAttribute('page', 1, 'sf_admin/kategori')));
    $this->pager->init();
    // save page
    if ($this->getRequestParameter('page')) {
        $this->getUser()->setAttribute('page', $this->getRequestParameter('page'), 'sf_admin/kategori');
    }
  }

  public function executeCreate()
  {
    return $this->forward('kategori', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('kategori', 'edit');
  }

  public function executeEdit()
  {
    $this->kategori = $this->getKategoriOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateKategoriFromRequest();

      $this->saveKategori($this->kategori);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('kategori/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('kategori/list');
      }
      else
      {
        return $this->redirect('kategori/edit?id='.$this->kategori->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->kategori = KategoriPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->kategori);

    try
    {
      $this->deleteKategori($this->kategori);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Kategori. Make sure it does not have any associated items.');
      return $this->forward('kategori', 'list');
    }

    return $this->redirect('kategori/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->kategori = $this->getKategoriOrCreate();
    $this->updateKategoriFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveKategori($kategori)
  {
    $kategori->save();

  }

  protected function deleteKategori($kategori)
  {
    $kategori->delete();
  }

  protected function updateKategoriFromRequest()
  {
    $kategori = $this->getRequestParameter('kategori');

    if (isset($kategori['nama']))
    {
      $this->kategori->setNama($kategori['nama']);
    }
    if (isset($kategori['deskripsi']))
    {
      $this->kategori->setDeskripsi($kategori['deskripsi']);
    }
    if (isset($kategori['nama_strip']))
    {
      $this->kategori->setNamaStrip($kategori['nama_strip']);
    }
    if (isset($kategori['created_at']))
    {
      if ($kategori['created_at'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($kategori['created_at']))
          {
            $value = $dateFormat->format($kategori['created_at'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $kategori['created_at'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->kategori->setCreatedAt($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->kategori->setCreatedAt(null);
      }
    }
    if (isset($kategori['updated_at']))
    {
      if ($kategori['updated_at'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($kategori['updated_at']))
          {
            $value = $dateFormat->format($kategori['updated_at'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $kategori['updated_at'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->kategori->setUpdatedAt($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->kategori->setUpdatedAt(null);
      }
    }
  }

  protected function getKategoriOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $kategori = new Kategori();
    }
    else
    {
      $kategori = KategoriPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($kategori);
    }

    return $kategori;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');
      if (isset($filters['created_at']['from']) && $filters['created_at']['from'] !== '')
      {
        $filters['created_at']['from'] = sfI18N::getTimestampForCulture($filters['created_at']['from'], $this->getUser()->getCulture());
      }
      if (isset($filters['created_at']['to']) && $filters['created_at']['to'] !== '')
      {
        $filters['created_at']['to'] = sfI18N::getTimestampForCulture($filters['created_at']['to'], $this->getUser()->getCulture());
      }

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/kategori');
      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/kategori/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/kategori/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/kategori/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/kategori/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/kategori/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['nama_is_empty']))
    {
      $criterion = $c->getNewCriterion(KategoriPeer::NAMA, '');
      $criterion->addOr($c->getNewCriterion(KategoriPeer::NAMA, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nama']) && $this->filters['nama'] !== '')
    {
      $c->add(KategoriPeer::NAMA, strtr($this->filters['nama'], '*', '%'), Criteria::LIKE);
    }
    if (isset($this->filters['created_at_is_empty']))
    {
      $criterion = $c->getNewCriterion(KategoriPeer::CREATED_AT, '');
      $criterion->addOr($c->getNewCriterion(KategoriPeer::CREATED_AT, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['created_at']))
    {
      if (isset($this->filters['created_at']['from']) && $this->filters['created_at']['from'] !== '')
      {
        $criterion = $c->getNewCriterion(KategoriPeer::CREATED_AT, $this->filters['created_at']['from'], Criteria::GREATER_EQUAL);
      }
      if (isset($this->filters['created_at']['to']) && $this->filters['created_at']['to'] !== '')
      {
        if (isset($criterion))
        {
          $criterion->addAnd($c->getNewCriterion(KategoriPeer::CREATED_AT, $this->filters['created_at']['to'], Criteria::LESS_EQUAL));
        }
        else
        {
          $criterion = $c->getNewCriterion(KategoriPeer::CREATED_AT, $this->filters['created_at']['to'], Criteria::LESS_EQUAL);
        }
      }

      if (isset($criterion))
      {
        $c->add($criterion);
      }
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/kategori/sort'))
    {
      $sort_column = KategoriPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/kategori/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'kategori{id}' => 'Id:',
      'kategori{nama}' => 'Nama:',
      'kategori{deskripsi}' => 'Deskripsi:',
      'kategori{nama_strip}' => 'Nama strip:',
      'kategori{created_at}' => 'Created at:',
      'kategori{updated_at}' => 'Updated at:',
    );
  }
}
